#! /usr/bin/env python

# -----------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# -----------------------------------------------------------------------

import sys
import getopt
import os

from ducc_base import DuccBase

class DuccServices(DuccBase):

    def make_classpath(self, uima_home):
        cp = self.DUCC_HOME + '/lib/uima-ducc-cli.jar'
        cp = cp + ':' + uima_home + '/lib/uima-core.jar'
        cp = cp + ':' + uima_home + '/lib/uimaj-as-core.jar'
        return cp

    def handle_uima_home(self, argv):
        answer = []
        skip = False
        uima_home = None

        # first look for uima-home in args, and if its there, extract it
        for a in argv:
            if ( skip ) :
                uima_home = a
                skip = False
                continue
            if ( a in ('-u', '--uima-home') ):
                skip = True
                continue
            answer.append(a)

        # if no uima-home, look in environment.  if not there. use DUCC's uima
        if ( uima_home == None ):
            if ( os.environ.has_key('UIMA_HOME') ):
                uima_home = os.environ['UIMA_HOME']
            else:
                uima_home = self.DUCC_HOME + '/apache-uima'

        return (answer, uima_home)

    def main(self, argv):        
        (argv, uima_home) = self.handle_uima_home(argv)
        cp = self.make_classpath(uima_home);        
        self.spawn(self.java(), '-cp', cp, 'org.apache.uima.ducc.cli.DuccServiceApi', ' '.join(self.mkargs(argv)))

if __name__ == "__main__":
    svc = DuccServices()
    svc.main(sys.argv[1:])

