#!/usr/bin/env python
# -----------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# -----------------------------------------------------------------------


import os
import sys
import getopt

from ducc_util  import DuccUtil

class DuccRmQLoad(DuccUtil):

    def usage(self, msg):
        if ( msg != None ):
            print msg

        print 'rm_qload'
        print '    This returns statistics indicative of the load and scheduling capacity of the system'
        print ''
        print 'Example:'
        print '   rm_qload'
        sys.exit(1)
    
    def main(self, argv):

        format = None

        try:
            opts, args = getopt.getopt(argv, 'h?', ['console', 'compact'])
        except:
            self.usage("Invalid arguments " + ' '.join(argv))
            
        for ( o, a ) in opts:
            if o in ('--console'):
                format = o
            if o in ('--compact'):
                format = o
            elif o in ('-h', '?'):
                self.usage(None)

        if ( format == None ):
            self.usage("Must specify --console or --compact")
       
        DUCC_JVM_OPTS = ' -Dducc.deploy.configuration=' + self.DUCC_HOME + "/resources/ducc.properties "
        DUCC_JVM_OPTS = DUCC_JVM_OPTS + ' -DDUCC_HOME=' + self.DUCC_HOME
        DUCC_JVM_OPTS = DUCC_JVM_OPTS + ' -Dducc.head=' + self.ducc_properties.get('ducc.head')

        self.spawn(self.java(), DUCC_JVM_OPTS, 'org.apache.uima.ducc.common.main.DuccRmAdmin', '--qload', format) 
        
        return

if __name__ == "__main__":
    query = DuccRmQLoad()
    query.main(sys.argv[1:])

    
