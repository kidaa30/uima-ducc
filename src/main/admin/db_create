#!/usr/bin/env python
# -----------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# -----------------------------------------------------------------------


import os
import sys
import getopt

import shutil
import subprocess
from  stat import *

from ducc_util import DuccUtil


from ducc_base import Properties
from ducc_base import Property

from ducc_base import find_ducc_home
from ducc_base import find_localhost

from ducc import Ducc

import db_util as dbu

# 
# Create and initialize the DUCC database.  In a new installation this is handled by
# ducc_post_install.  Older installations need to run db_create as one of the steps
# of migration to the DB.
#
class DbCreate(DuccUtil):

    def usage(self, msg):

        if ( msg != None ):
            print ' '.join(msg)

              
        print 'DbCreate configures the database and installs the schema.'
        print ''
        print "Usage:"
        print "   db_create [options]"
        print "        If no options prompts are given for expected parameters."
        print ""
        print "Options:"
        print "   [-n, --head-node] <ducc head node>"
        print "        This is the name of the host that will run the DUCC management processes."
        print ""
        print "   [-, --db-password] <root password for database>"
        print "        This is the password DUCC uses to manage the database."
        print ""
        print "   [-h, -? --help]"
        print "        Prints this message."
        print ""
        sys.exit(1) 
                                    
    def main(self, argv):                    

        self.database_pw = None

        try:
            opts, args = getopt.getopt(argv, 'd:n:h?', ['db-password=', 'head-node=', 'help'])
        except:
            self.usage("Invalid arguments " + ' '.join(argv))


        for ( o, a ) in opts:
            if o in ('-n', '--head-node'):
                self.ducc_head = a
            if o in ('-d', '--db-password'):
                self.database_pw = a
            elif o in ('-h', '-?', '--help'):
                self.usage(None)
        

        # start with merged properties
        self.merge_properties();

        # configure the database for local system and initialize the schema
        db_node = self.ducc_properties.get("ducc.head")
        dbu.configure_database(self.DUCC_HOME, db_node, self.jvm, 'doodle')
        return

        # write update site.ducc.properties with db installation
        self.ducc_site_properties.write(self.site_properties_name)

        # remerge to insure it's all correct and ready to go
        self.merge_properties();

if __name__ == "__main__":

    postinstall = DbCreate()
    postinstall.main(sys.argv[1:])
